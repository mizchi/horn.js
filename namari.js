// Generated by CoffeeScript 1.6.3
(function() {
  var Dispatchable, MyStatus, Querified, Removable, extend, _ref,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  extend = function(obj, mixin) {
    var method, name;
    for (name in mixin) {
      method = mixin[name];
      obj[name] = method;
    }
    return obj;
  };

  window.hymn = function() {};

  hymn.templates = {};

  hymn.registerTemplate = function(str) {
    var $el, name;
    $el = $(str).eq(0);
    name = $el.data('template-name');
    if (!name) {
      throw "data-template-name is not defined";
    }
    hymn.templates[name] = $el;
  };

  hymn.directives = {};

  hymn.addDirective = function(name, fn) {
    return hymn.directives[name] = fn;
  };

  hymn.addDirective("data-text", function(view) {
    var attr, _i, _len, _ref, _results,
      _this = this;
    _ref = view.attrs;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      attr = _ref[_i];
      _results.push((function(attr) {
        var $el;
        $el = view._$("[data-text=" + attr + "]");
        return view.on("change:" + attr, function() {
          return $el.text(view[attr]);
        });
      })(attr));
    }
    return _results;
  });

  hymn.addDirective("data-click", function(view) {
    var $el,
      _this = this;
    $el = view._$("[data-click]");
    return $el.on('click', function(e) {
      var funcName;
      funcName = $(e.target).data('click');
      return view[funcName]();
    });
  });

  hymn.addDirective("data-visible", function(view) {
    var attr, _i, _len, _ref, _results,
      _this = this;
    _ref = view.attrs;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      attr = _ref[_i];
      _results.push((function(attr) {
        var $els, update;
        $els = view._$("[data-visible=" + attr + "]");
        (update = function() {
          return $els.each(function(index) {
            var $el;
            $el = $(this);
            if (view[attr]) {
              return $el.show();
            } else {
              return $el.hide();
            }
          });
        })();
        return view.on("change:" + attr, update);
      })(attr));
    }
    return _results;
  });

  hymn.addDirective("data-click-with-trigger", function(view) {
    var $el,
      _this = this;
    $el = view._$("[data-click-with-trigger]");
    return $el.on('click', function(e) {
      var eventName;
      eventName = $(e.target).data('click-with-trigger');
      return view.trigger(eventName);
    });
  });

  Dispatchable = {
    trigger: function() {
      var _ref;
      return (_ref = this.$el).trigger.apply(_ref, arguments);
    },
    on: function() {
      var _ref;
      return (_ref = this.$el).on.apply(_ref, arguments);
    },
    off: function() {
      var _ref;
      return (_ref = this.$el).off.apply(_ref, arguments);
    },
    observe: function(first, second, third) {
      var callback, key, model;
      if ((typeof third) === 'function') {
        model = first;
        key = first;
        callback = third;
      } else if (this.model != null) {
        model = this.model;
        key = first;
        callback = second;
      } else {
        throw 'invalid observe target';
      }
      return model.on("change:" + key, callback);
    }
  };

  Querified = {
    css: function() {
      var _ref;
      return (_ref = this.$el).css.apply(_ref, arguments);
    },
    selectorCss: function() {
      var args, selector, _ref;
      selector = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return (_ref = this.$(selector)).css.apply(_ref, args);
    },
    cssProperty: function(key, propertyName) {
      if (propertyName == null) {
        propertyName = key;
      }
      return Object.defineProperty(this, key, {
        get: function() {
          return this.css(propertyName);
        },
        set: function(v) {
          return this.css(propertyName, v);
        }
      });
    },
    $: function(selector) {
      return this.$el.find(selector);
    },
    _$: function(selector) {
      var _base;
      if (this._local_cache == null) {
        this._local_cache = {};
      }
      return (_base = this._local_cache)[selector] != null ? (_base = this._local_cache)[selector] : _base[selector] = this.$(selector);
    },
    show: function() {
      return this.$el.show();
    },
    hide: function() {
      return this.$el.hide();
    },
    remove: function() {
      return this.$el.remove();
    },
    html: function() {
      var _ref;
      return (_ref = this.$el).html.apply(_ref, arguments);
    },
    text: function() {
      var _ref;
      return (_ref = this.$el).text.apply(_ref, arguments);
    }
  };

  Removable = {
    attach: function(selector, container) {
      if (container == null) {
        container = null;
      }
      if (arguments.length === 1 && (selector.$el != null)) {
        return selector.$el.append(this.$el);
      } else if ((container != null ? container.$ : void 0) != null) {
        return container.$(selector).append(this.$el);
      } else {
        return $(selector).append(this.$el);
      }
    },
    detach: function() {
      return this.$el.detach();
    }
  };

  hymn.View = (function() {
    extend(View.prototype, Querified);

    extend(View.prototype, Dispatchable);

    extend(View.prototype, Removable);

    function View() {
      var attr, func, name, _i, _len, _ref, _ref1;
      this.$el = hymn.templates[this.templateName].clone();
      this.attrs = this.$el.data('attrs').replace(/\s/g, '').split(',');
      _ref = this.attrs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        attr = _ref[_i];
        this.property(attr);
      }
      _ref1 = hymn.directives;
      for (name in _ref1) {
        func = _ref1[name];
        func(this);
      }
    }

    View.prototype.property = function(key) {
      var orig;
      orig = this[key];
      delete this[key];
      Object.defineProperty(this, key, {
        enumerable: false,
        get: function() {
          return this['_' + key];
        },
        set: function(v) {
          if (v !== this['_' + key]) {
            this['_' + key] = v;
            return this.trigger("change:" + key);
          }
        }
      });
      return this['_' + key] = orig != null ? orig : null;
    };

    return View;

  })();

  hymn.registerTemplate("<div\n  data-template-name=\"my-status\"\n  data-attrs=\"name, money, showAddMoney\">\n\n  <span data-text=\"name\">NO NAME</span>\n  <span data-text=\"money\">0</span>\n  <button data-click-with-trigger=\"update\">update</button>\n  <button data-click=\"toggleShowAddMoney\">toggle show add money</button>\n  <button data-visible=\"showAddMoney\" data-click=\"addMoney\">addMoney</button>\n</div>");

  MyStatus = (function(_super) {
    __extends(MyStatus, _super);

    function MyStatus() {
      _ref = MyStatus.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    MyStatus.prototype.templateName = 'my-status';

    MyStatus.prototype.addMoney = function() {
      return this.money += 10;
    };

    MyStatus.prototype.toggleShowAddMoney = function() {
      return this.showAddMoney = !this.showAddMoney;
    };

    return MyStatus;

  })(hymn.View);

  $(function() {
    window.a = new MyStatus;
    a.attach('body');
    return a.on('update', function() {
      return console.log('updated');
    });
  });

}).call(this);
